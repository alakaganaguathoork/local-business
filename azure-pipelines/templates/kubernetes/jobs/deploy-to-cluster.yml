parameters:
  - name: deploymentName
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: environment
    type: string
  - name: awsCredentials
    type: string
  - name: awsRegion
    type: string
    default: us-east-1
  - name: awsClusterName
    type: string
  - name: manifests
    type: object
    default: []

jobs:
  - deployment: ${{ parameters.deploymentName }}
    displayName: ${{ parameters.deploymentName }}
    dependsOn: ${{ parameters.dependsOn }}
    environment: ${{ parameters.environment }}
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self

            - task: Bash@3
              name: update_config
              displayName: aws eks update-kubeconfig
              condition: succeeded()
              inputs:
                targetType: inline
                script: |
                  aws eks update-kubeconfig \
                    --region ${{ parameters.awsRegion }} \
                    --name ${{ parameters.awsClusterName }}
                  
            - task: Bash@3
              name: copy_sg_ids
              displayName: copy security groups ids
              condition: succeeded()
              inputs:
                targetType: inline
                script: |
                  touch .sg-ids.output
                  VPC_ID=$(aws eks describe-cluster \
                    --name "${{ parameters.awsClusterName }}" \
                    --query 'cluster.resourcesVpcConfig.vpcId' \
                    --output text
                  )
                    
                  aws ec2 describe-security-groups \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query 'SecurityGroups[*].GroupId' \
                    > .sg-ids.output
                  echo "VPC ID=$VPC_ID"

                  mv .sg-ids.output helm/charts/local-business/

            # - ${{ if gt(length(parameters.manifests), 0) }}:
              # - ${{ each item in parameters.manifests }}:
                # - task: Bash@3
                  # name: ${{ format('apply_{0}', item.name) }}
                  # displayName: apply ${{ item.name }} in ${{ parameters.awsClusterName }} cluster 
                  # inputs:
                    # targetType: inline
                    # script: |
                      # kubectl apply -f ${{ item.manifest }}
            
            - task: Bash@3
              name: app_helm_chart 
              displayName: app helm chart
              condition: succeeded()
              inputs:
                targetType: inline
                script: |
                  # helm uninstall local-business -n app || true
                  # kubectl delete namespace app --ignore-not-found

                  # helm upgrade --install local-business kubernetes/helm/local-business --values /helm/local-business/values.yaml
                  kubectl apply -n argocd -f $(System.DefaultWorkingDirectory)/helm/applications/application-aws.yaml
                  rm $(System.DefaultWorkingDirectory)/helm/charts/local-business/.sg-ids.output
                
            - task: Bash@3
              name: endpoint
              displayName: get endpoints in ${{ parameters.awsClusterName }} cluster 
              inputs:
                targetType: inline
                script: |
                  sleep 10
                  kubectl get ingress -A -o json \
                    | jq -r '
                      def H: ["NAMESPACE","NAME","CLASS","HOST","PATH","SERVICE","PORT","ALB_GROUP","TARGET_TYPE","LISTEN_PORTS","LB_HOSTNAME"];
                      (H | @tsv),
                      (.items[] as $i
                       | ($i.spec.rules[]? // [{"host":"*","http":$i.spec.defaultBackend|not}]) as $r
                       | ($r.http.paths[]? // [{"path":"/*","backend":$i.spec.defaultBackend}] )
                       | [
                          $i.metadata.namespace,
                          $i.metadata.name,
                          ($i.spec.ingressClassName // $i.metadata.annotations["kubernetes.io/ingress.class"] // "-"),
                          ($r.host // "*"),
                          (.path // "/*"),
                          (.backend.service.name // "-"),
                          (.backend.service.port.number // .backend.service.port.name // "-"),
                          ($i.metadata.annotations["alb.ingress.kubernetes.io/group.name"] // "-"),
                          ($i.metadata.annotations["alb.ingress.kubernetes.io/target-type"] // "-"),
                          ($i.metadata.annotations["alb.ingress.kubernetes.io/listen-ports"] // "-"),
                          (($i.status.loadBalancer.ingress // []) | map(.hostname // .ip) | join(","))
                        ] | @tsv
                      )
                    ' | column -t -s $'\t'

    workspace:
      clean: all